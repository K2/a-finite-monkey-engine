Metadata-Version: 2.2
Name: finite-monkey
Version: 0.1.0
Summary: Smart Contract Audit & Analysis Framework
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: llama-index-core>=0.12.22
Requires-Dist: httpx>=0.27.0
Requires-Dist: sqlalchemy>=2.0.25
Requires-Dist: asyncpg>=0.29.0
Requires-Dist: aiofiles>=23.2.1
Requires-Dist: aiosqlite>=0.21.0
Requires-Dist: anyio>=4.2.0
Requires-Dist: tree-sitter>=0.20.4
Requires-Dist: uvloop>=0.19.0; sys_platform != "win32"
Requires-Dist: llama-index-embeddings-huggingface>=0.5.2
Requires-Dist: hf-transfer>=0.1.9
Requires-Dist: llama-index-vector-stores-lancedb>=0.3.0
Requires-Dist: fpdf>=1.7.2
Requires-Dist: fastapi>=0.110.0
Requires-Dist: uvicorn>=0.28.0
Requires-Dist: jinja2>=3.1.2
Requires-Dist: websockets>=12.0.0
Requires-Dist: ipython>=8.12.0
Requires-Dist: pydantic>=2.5.2
Requires-Dist: griffe>=1.6.0
Requires-Dist: pydantic-settings>=2.8.1
Requires-Dist: sentencepiece>=0.2.0
Requires-Dist: pip>=25.0.1
Requires-Dist: tree-sitter-solidity>=1.2.11
Requires-Dist: llama-index-llms-ollama>=0.5.3
Requires-Dist: streamlit>=1.43.2
Requires-Dist: asyncio>=3.4.3
Requires-Dist: llama-index-llms-openai>=0.3.25
Requires-Dist: llama-index-agent-openai>=0.4.6
Requires-Dist: openai>=1.65.3
Requires-Dist: streamlit-pills>=0.3.0
Requires-Dist: loguru>=0.7.3
Requires-Dist: langchain>=0.3.20
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.23.0; extra == "dev"
Requires-Dist: black>=23.7.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"

# Finite Monkey Engine

A comprehensive smart contract security analysis framework with multi-agent architecture and asynchronous processing.

## Features

- **Asynchronous Architecture**: Fully asynchronous workflow processing for handling large codebases efficiently
- **Smart Contract Chunking**: Intelligently splits large contracts into semantic chunks to overcome LLM context limitations
- **Multi-LLM Support**: Supports multiple LLM providers (Ollama, Claude, OpenAI) for different analysis tasks
- **Specialized Agents**: Dedicated agents for research, validation, and documentation
- **Vector Store Integration**: LlamaIndex-based vector store for efficient code analysis
- **TreeSitter Analysis**: Semantic code analysis using TreeSitter
- **Web Interface**: Interactive web interface for project management and result visualization
- **Cognitive Bias Analysis**: Identifies cognitive biases in code that may lead to vulnerabilities
- **Interactive Console**: Built-in IPython console with syntax highlighting for debugging


```mermaid
graph TD
    subgraph Inner Agent Loop
        A[Code Input] --> B[Semantic Chunking]
        B --> C{Strategy Selector}
        
        subgraph Multi-Strategy Analysis
            C -->|Pattern Analysis| D1[Pattern Agent]
            C -->|Control Flow| D2[Flow Agent]
            C -->|Data Flow| D3[Data Agent]
            C -->|Context Analysis| D4[Context Agent]
            
            D1 --> E[Response Pool]
            D2 --> E
            D3 --> E
            D4 --> E
        end
        
        E --> F[Reranker]
        F --> G[Reflection Layer]
        
        subgraph Reflection Process
            G --> H[Self-Consistency Check]
            H --> I[Cross-Reference]
            I --> J[Confidence Scoring]
            J --> |Low Confidence| K[Strategy Refinement]
            K --> |Adjust Weights| C
            J --> |High Confidence| L[Final Output]
        end
        
        L --> M[Memory Store]
        M --> |Update Weights| F
        M --> |Strategy Feedback| C
    end
    
    subgraph Vector Storage
        VS1[(Pattern DB)]
        VS2[(Flow DB)]
        VS3[(Data DB)]
        VS4[(Context DB)]
        
        D1 -.-> VS1
        D2 -.-> VS2
        D3 -.-> VS3
        D4 -.-> VS4
    end
    
    style A fill:#3498db,stroke:#333,stroke-width:2px,color:black
    style B fill:#2ecc71,stroke:#333,stroke-width:2px,color:black
    style C fill:#9b59b6,stroke:#333,stroke-width:2px,color:black
    style F fill:#f1c40f,stroke:#333,stroke-width:2px,color:black
    style G fill:#e67e22,stroke:#333,stroke-width:2px,color:black
    style L fill:#1abc9c,stroke:#333,stroke-width:2px,color:black
    style M fill:#34495e,stroke:#333,stroke-width:2px,color:black
```


Each component in this inner loop serves a specific purpose:

1. **Strategy Selector**
   - Dynamically routes analysis to specialized agents
   - Uses weighted decision making based on past performance
   - Maintains strategy effectiveness metrics

2. **Multi-Strategy Agents**
   - Pattern Agent: Identifies common vulnerability patterns
   - Flow Agent: Analyzes control flow vulnerabilities
   - Data Agent: Examines data handling issues
   - Context Agent: Evaluates broader security context

3. **Reranker**
   - Aggregates responses from multiple agents
   - Applies dynamic weights based on strategy success
   - Considers historical performance

4. **Reflection Layer**
   - Self-consistency validation
   - Cross-reference checking
   - Confidence scoring
   - Strategy refinement for low confidence results

5. **Memory Store**
   - Maintains agent performance metrics
   - Updates strategy weights
   - Provides feedback for future analysis

The system uses vector stores for each agent type to maintain specialized knowledge bases and enable semantic search for similar patterns or findings.


## Installation

### Quick Setup (Recommended)

The fastest way to get started is to use the setup script, which will create a virtual environment and install all dependencies:

```bash
# Clone the repository
git clone https://github.com/yourusername/a-finite-monkey-engine.git
cd a-finite-monkey-engine

# Make setup script executable
chmod +x setup.sh

# Run the setup script
./setup.sh
```

### Manual Installation

For manual installation, you can use `uv` (recommended) or `pip`:

```bash
# Clone the repository
git clone https://github.com/yourusername/a-finite-monkey-engine.git
cd a-finite-monkey-engine

# Create and activate virtual environment using uv (recommended)
uv venv
source .venv/bin/activate

# Install dependencies with uv
uv pip install -e .

# OR use pip if you prefer
pip install -e .

# Create necessary directories
mkdir -p reports lancedb db
```

## Configuration

Finite Monkey Engine is highly configurable and supports multiple methods of configuration:

1. **Environment Variables**: Set variables directly in your shell
2. **Dotenv File**: Create a `.env` file in the project root
3. **Command Line Arguments**: Pass configuration via CLI flags
4. **pyproject.toml**: Configure in the `[tool.finite-monkey-engine]` section

The configuration system uses a priority order: command line > environment variables > .env file > pyproject.toml > defaults.

### Key Configuration Options

#### Model Settings

| Option | Description | Default |
|--------|-------------|---------|
| `WORKFLOW_MODEL` | Default LLM model for workflow orchestration | `"llama3:8b-instruct"` |
| `QUERY_MODEL` | Model used for generating queries | `""` (uses WORKFLOW_MODEL) |
| `EMBEDDING_MODEL_NAME` | Model for embedding generation | `"BAAI/bge-small-en-v1.5"` |

#### API Keys and Endpoints

| Option | Description | Default |
|--------|-------------|---------|
| `OPENAI_API_BASE` | Base URL for OpenAI/Ollama API | `"http://127.0.0.1:11434/v1"` |
| `OPENAI_API_KEY` | API key for OpenAI | `""` |
| `CLAUDE_API_KEY` | API key for Anthropic Claude | `""` |
| `ANTHROPIC_API_KEY` | Alternative API key for Claude | `""` |

#### Storage Configuration

| Option | Description | Default |
|--------|-------------|---------|
| `LANCEDB_URI` | URI for LanceDB vector database | `"lancedb_"` |
| `VECTOR_STORE_PATH` | Path to vector store | `"lancedb"` |
| `DB_DIR` | Directory for SQLite database | `"db"` |

#### Web Interface

| Option | Description | Default |
|--------|-------------|---------|
| `WEB_HOST` | Host to bind web interface | `"0.0.0.0"` |
| `WEB_PORT` | Port for web interface | `8000` |
| `WEB_INTERFACE` | Enable web interface | `false` |

### Example .env File

```
# Basic configuration
WORKFLOW_MODEL=llama3:8b-instruct
OPENAI_API_BASE=http://127.0.0.1:11434/v1

# API keys (if using cloud services)
CLAUDE_API_KEY=your_claude_api_key
OPENAI_API_KEY=your_openai_api_key

# Performance settings
MAX_THREADS_OF_SCAN=8
PYTHONASYNCIODEBUG=true
```

## Usage

### Command Line Interface

The CLI provides several commands for analyzing smart contracts and managing the framework. Make sure you've activated your virtual environment first.

```bash
# Activate the virtual environment
source .venv/bin/activate

# Analyze a single contract
python -m finite_monkey analyze -f examples/Vault.sol

# Analyze all contracts in a directory
python -m finite_monkey analyze -d examples/ --pattern "*.sol"

# Analyze multiple specific files
python -m finite_monkey analyze --files examples/Vault.sol examples/Token.sol

# Use a specific model
python -m finite_monkey analyze -f examples/Vault.sol -m "llama3:8b-instruct"

# Specify a custom query
python -m finite_monkey analyze -f examples/Vault.sol -q "Check for reentrancy vulnerabilities"

# Load and analyze a GitHub repository
python -m finite_monkey github https://github.com/username/repo

# Start the web interface
python -m finite_monkey web
```

You can also use the standalone run.py script, which supports zero-configuration mode (defaults to the examples directory):

```bash
# Run with zero-configuration (analyzes examples/Vault.sol by default)
./run.py

# Analyze a single contract
./run.py analyze -f examples/Vault.sol

# Analyze contracts and generate visualization
./run.py full-audit -f examples/Vault.sol

# Use the new fully async analyzer
./run_analysis.sh -f examples/SimpleVault.sol
```

### Python API

```python
from finite_monkey.agents import WorkflowOrchestrator

async def main():
    orchestrator = WorkflowOrchestrator()
    
    # Run a complete audit
    report = await orchestrator.run_audit(
        solidity_path="examples/Vault.sol",
        query="Check for reentrancy vulnerabilities"
    )
    
    # Save the report
    await report.save("report.md")

# Run with asyncio
import asyncio
asyncio.run(main())
```

## Web Interface

The Finite Monkey Engine provides two web interfaces:

### FastAPI Interface (Original)

The original web interface provides a user-friendly way to manage projects, run audits, and view results:

```bash
# Start the web interface with default settings
./run_web.sh

# Or using the module directly
python -m finite_monkey web

# Specify host and port
python -m finite_monkey web --host 127.0.0.1 --port 8080

# Enable development mode with auto-reload
python -m finite_monkey web --reload --debug

# Enable IPython terminal for interactive debugging
python -m finite_monkey web --enable-ipython
```

### FastHTML Interface (Recommended)

The newer, modernized web interface provides an enhanced user experience with improved UI/UX:

```bash
# Start the FastHTML web interface
./run_fasthtml_web.sh
```

The script will automatically:
- Create/activate a virtual environment if needed
- Install required dependencies
- Start the server with hot reload enabled

### Features

Both web interfaces provide several key features:
- **Dashboard**: View metrics, recent activities, and overall status
- **Interactive Terminal**: IPython console with framework objects pre-loaded
- **Reports Viewer**: Browse, search, and view security audit reports
- **Visualizations**: Interactive charts and graphs for security analysis
- **Configuration**: Adjust framework settings and parameters
- **Telemetry**: Monitor agent activity and performance

The FastHTML interface adds these enhancements:
- Modern dark-themed UI with responsive design
- Real-time WebSocket communication
- Markdown rendering for security reports
- Syntax highlighting and ANSI color support
- SQLAlchemy integration for session persistence
- Mobile-friendly responsive layout

## Development

See `NEXT_STEPS.md` for current roadmap and priorities.

For details on the new asynchronous workflow architecture, see [ASYNC_WORKFLOW.md](docs/ASYNC_WORKFLOW.md).

## License

MIT
