"""
Add Vulnerability model with support for derived/acquired classification.
"""

from enum import Enum
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Literal

class VulnerabilitySource(str, Enum):
    """Classification of vulnerability discovery sources"""
    DERIVED = "derived"    # Found through automated code analysis
    ACQUIRED = "acquired"  # Found through issue text or human discussion
    HYBRID = "hybrid"      # Found through both methods
    UNKNOWN = "unknown"    # Source not specified

class Vulnerability(BaseModel):
    """Represents a detected vulnerability"""
    id: str
    name: str
    description: str
    severity: Literal["low", "medium", "high", "critical"] = "medium"
    confidence: float = 0.0
    contract_name: Optional[str] = None
    function_name: Optional[str] = None
    code_location: Optional[Dict[str, Any]] = None
    references: List[str] = []
    tags: List[str] = []
    source: VulnerabilitySource = VulnerabilitySource.UNKNOWN
    metadata: Dict[str, Any] = {}
    
    def is_derived(self) -> bool:
        """Check if the vulnerability was derived from code analysis"""
        return self.source == VulnerabilitySource.DERIVED or self.source == VulnerabilitySource.HYBRID
    
    def is_acquired(self) -> bool:
        """Check if the vulnerability was acquired from issue text"""
        return self.source == VulnerabilitySource.ACQUIRED or self.source == VulnerabilitySource.HYBRID
